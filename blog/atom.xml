<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">conda-forge Blog</title>
  <id>www.conda-forge.org/blog/blog/atom.xml</id>
  <updated>2020-07-11T00:00:00Z</updated>
  <link href="www.conda-forge.org/blog" />
  <link href="www.conda-forge.org/blog/blog/atom.xml" rel="self" />
  <generator uri="https://ablog.readthedocs.org" version="0.10.6">ABlog</generator>
  <entry xml:base="www.conda-forge.org/blog/blog/atom.xml">
    <title type="text">R 4.0 Migration Retrospective</title>
    <id>www.conda-forge.org/blog/posts/2020-07-11-R-4/</id>
    <updated>2020-07-11T00:00:00Z</updated>
    <published>2020-07-11T00:00:00Z</published>
    <link href="www.conda-forge.org/blog/posts/2020-07-11-R-4/" />
    <author>
      <name>C.J. Wright, Matthew R. Becker</name>
    </author>
    <content type="html">&lt;p&gt;While the R 4.0 migration has been functionally complete for quite a while, the recent migration of &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;r-java&lt;/span&gt;&lt;/code&gt; and
its dependents gives a good opportunity to write a retrospective on the technical issues with large-scale migrations
in &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;conda-forge&lt;/span&gt;&lt;/code&gt; and how we solved them.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="www.conda-forge.org/blog/blog/atom.xml">
    <title type="text">Scipy 2020 Packaging BOF</title>
    <id>www.conda-forge.org/blog/posts/2020-07-06-scipy-bof/</id>
    <updated>2020-07-02T00:00:00Z</updated>
    <published>2020-07-02T00:00:00Z</published>
    <link href="www.conda-forge.org/blog/posts/2020-07-06-scipy-bof/" />
    <author>
      <name>C.J. Wright</name>
    </author>
    <content type="html">&lt;p&gt;Have some thoughts about conda-forge and how it can be expanded in a way that is sustainable? Join us in this virtual Birds of a Feather discussion where we’ll discuss maintenance, pain points, opportunities within conda-forge. Any and all are welcome, and we especially are seeking new viewpoints and opinions!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="www.conda-forge.org/blog/blog/atom.xml">
    <title type="text">Conda-Forge Operational Risk</title>
    <id>www.conda-forge.org/blog/posts/2020-07-02-op-risk/</id>
    <updated>2020-07-02T00:00:00Z</updated>
    <published>2020-07-02T00:00:00Z</published>
    <link href="www.conda-forge.org/blog/posts/2020-07-02-op-risk/" />
    <author>
      <name>C.J. Wright</name>
    </author>
    <content type="html">&lt;p&gt;Recently I’ve been thinking about operational risk (op. risk).
Operational risks arise from failures of processes, for instance a missing email, or an automated software system not running properly.
Many commercial institutions are interested in minimizing op. risk, since it is risk that produces no value, as opposed to risks associated with investing.
This is also something I think about in my job at &lt;a class=&quot;reference external&quot; href=&quot;https://www.lab49.com/&quot;&gt;Lab49&lt;/a&gt;, where I’m a software engineering consultant focusing on financial institutions.
I think there is also a good analogy for Conda-Forge, even though we are not a commercial outfit.
In this case the risk we incur isn’t the potential for lost earnings but frustration for our users and maintainers in the form of bugs and lackluster user experience.
In this post I explore three main sources of operational risk for Conda-Forge: Automation, Top-Down Control, and Self-Service Structure.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="www.conda-forge.org/blog/blog/atom.xml">
    <title type="text">PyPy builds on conda-forge</title>
    <id>www.conda-forge.org/blog/posts/2020-03-10-pypy/</id>
    <updated>2020-03-10T00:00:00Z</updated>
    <published>2020-03-10T00:00:00Z</published>
    <link href="www.conda-forge.org/blog/posts/2020-03-10-pypy/" />
    <author>
      <name>Isuru Fernando</name>
    </author>
    <content type="html">&lt;p&gt;conda-forge now supports PyPy3.6 as the python interpreter in a conda environment&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="www.conda-forge.org/blog/blog/atom.xml">
    <title type="text">Google Summer of Code 2020 improved automatic maintenance of conda-forge</title>
    <id>www.conda-forge.org/blog/posts/2020-02-04-GSoC/</id>
    <updated>2020-02-04T00:00:00Z</updated>
    <published>2020-02-04T00:00:00Z</published>
    <link href="www.conda-forge.org/blog/posts/2020-02-04-GSoC/" />
    <author>
      <name>Filipe Pires Alvarenga Fernandes</name>
    </author>
    <content type="html">&lt;p&gt;The &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;conda-forge&lt;/span&gt;&lt;/code&gt; “autotick” bot is a crucial part of &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;conda-forge&lt;/span&gt;&lt;/code&gt;’s infrastructure.
It enables automatic maintenance of &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;conda-forge&lt;/span&gt;&lt;/code&gt; packages by pushing version updates to the
underlying software and enabling large migrations of packages from one dependency to another
(e.g., Python 3.7 to Python 3.8). As &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;conda-forg&lt;/span&gt;&lt;/code&gt; grows in size, with over 9,000 packages to date,
automatic maintenance of the &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;conda-forge&lt;/span&gt;&lt;/code&gt; ecosystem will become even more important.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="www.conda-forge.org/blog/blog/atom.xml">
    <title type="text">By the power of Grayskull… I have the Conda recipe!</title>
    <id>www.conda-forge.org/blog/posts/2020-03-05-grayskull/</id>
    <updated>2020-02-04T00:00:00Z</updated>
    <published>2020-02-04T00:00:00Z</published>
    <link href="www.conda-forge.org/blog/posts/2020-03-05-grayskull/" />
    <author>
      <name>Marcelo Duarte Trevisani</name>
    </author>
    <content type="html">&lt;p&gt;&lt;span class=&quot;raw-html&quot;&gt;&lt;em&gt;The main goal of the Skeleto&lt;s&gt;n&lt;/s&gt;r is to conquer Grayskull.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="www.conda-forge.org/blog/blog/atom.xml">
    <title type="text">Automatically Deployed ABI Migrations</title>
    <id>www.conda-forge.org/blog/posts/2019-12-06-cfep09/</id>
    <updated>2019-12-06T00:00:00Z</updated>
    <published>2019-12-06T00:00:00Z</published>
    <link href="www.conda-forge.org/blog/posts/2019-12-06-cfep09/" />
    <author>
      <name>C.J. Wright</name>
    </author>
    <content type="html">&lt;p&gt;Handling application binary interface (ABI) migrations has always been a hassle for Conda-Forge.
Maintaining ABI consistency helps enable the “just use conda-forge” experience for many of our users,
making certain that numpy’s blas is the same as scipy’s.
As libraries update their code, the new versions may be ABI incompatible, as function signatures and other symbols
may have changed, leading to the dreaded &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;SegmentationFault&lt;/span&gt;&lt;/code&gt; and other errors.&lt;/p&gt;
</content>
  </entry>
</feed>
