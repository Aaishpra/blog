<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>conda-forge blog</title>
 <link href="https://conda-forge.org/blog//atom.xml" rel="self"/>
 <link href="https://conda-forge.org/blog/"/>
 <updated>2020-03-02T14:32:08-06:00</updated>
 <id>https://conda-forge.org/blog/</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 
 <entry>
   <title>Google Summer of Code 2020 improved automatic maintenance of `conda-forge`</title>
   <link href="https://conda-forge.org/blog//2020/02/04/GSoC"/>
   <updated>2020-02-04T00:00:00-06:00</updated>
   <id>https://conda-forge.org/blog//2020/02/04/GSoC</id>
   <content type="html">&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda-forge&lt;/code&gt; “autotick” bot is a crucial part of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda-forge&lt;/code&gt;’s infrastructure.
It enables automatic maintenance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda-forge&lt;/code&gt; packages by pushing version updates to the
underlying software and enabling large migrations of packages from one dependency to another
(e.g., Python 3.7 to Python 3.8). As &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda-forg&lt;/code&gt; grows in size, with over 9,000 packages to date,
automatic maintenance of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda-forge&lt;/code&gt; ecosystem will become even more important.&lt;/p&gt;

&lt;p&gt;We here at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda-forge&lt;/code&gt; have a large number of potential Google Sumer of Code projects
around maintenance and development of the autotick bot infrastructure. These projects are
high-impact, effecting the entire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda-forge&lt;/code&gt; ecosystem. They also cover multiple systems
including databases, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda&lt;/code&gt;’s CDN provider, continuous integration providers, and user interactions
on GitHub.&lt;/p&gt;

&lt;p&gt;Want to be a part of the team? Great! Take a look at the projects
below and get in touch with us on GitHub! You can check the
&lt;a href=&quot;https://github.com/regro/cf-scripts/labels/GSOC&quot;&gt;GSoC label&lt;/a&gt; for a detailed
listing of the issues that need work.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Maintenance and Refactoring&lt;/p&gt;

    &lt;p&gt;We have a large backlog of maintenance and refactoring issues that are great for
people with a range of experience from beginners to true code ninjas.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Integration Testing for the Autotick Bot&lt;/p&gt;

        &lt;p&gt;Run true integration testing on a copy of the graph to better test
 code changes and improve our CI process.&lt;/p&gt;

        &lt;p&gt;Issue: https://github.com/regro/cf-scripts/issues/261&lt;br /&gt;
 Experience Level: advanced&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Work on the “code hardening” &lt;a href=&quot;https://github.com/regro/cf-scripts/milestone/4&quot;&gt;Milestone&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;Address any of the issues in the milestone above related to code refactoring
and cleanup.&lt;/p&gt;

        &lt;p&gt;Issues: https://github.com/regro/cf-scripts/milestone/4&lt;br /&gt;
Experience Level: beginner to advanced&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Automated PRs for Globally Pinned Packages&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda-forge&lt;/code&gt; maintains a list of globally pinned packages. These are typically
dependencies whose version needs to be the same across all of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda-forge&lt;/code&gt; (e.g.,
the compiler versions or packages like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HDF5&lt;/code&gt;). While we have infrastructure to run
a migration of the downstream packages from a given pinned package, we do not have
automated infrastructure to propose the migration of the pin itself. The project here
is to add this functionality to our infrastructure.&lt;/p&gt;

    &lt;p&gt;Issue: https://github.com/regro/cf-scripts/issues/665&lt;br /&gt;
Experience Level: advanced&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda&lt;/code&gt; CDN for Updated Packages before Issuing PRs in a Migration&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda&lt;/code&gt; relies on a CDN provider to serve the index of available packages. There is
a moderate ~30 minute delay between when a package is uploaded to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;anaconda.org&lt;/code&gt; and
when it will appear in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda&lt;/code&gt; index. We currently do not take this delay into
account when issuing PRs in a migration.&lt;/p&gt;

    &lt;p&gt;Issue: https://github.com/regro/cf-scripts/issues/595&lt;br /&gt;
Experience Level: beginner&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finish Migrations with PR into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda-forge&lt;/code&gt; Pinnings File&lt;/p&gt;

    &lt;p&gt;Right now, when the migration of say package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABC&lt;/code&gt; to version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt; from version
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Y&lt;/code&gt; is done, we do not automatically merge the change in the globally pinned value of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABC&lt;/code&gt; into our listing of global pinnings. We should be issuing a PR to the
pinnings file once we have determined that a suitable fraction of the packages
effected by a migration have been properly rebuilt.&lt;/p&gt;

    &lt;p&gt;Issue: https://github.com/regro/cf-scripts/issues/595&lt;br /&gt;
Experience Level: moderate&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fully Render &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda&lt;/code&gt; Packages in order to Determine Migration Dependencies&lt;/p&gt;

    &lt;p&gt;Determining the dependencies of a given package is actually a computation
expensive task due to the way &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda&lt;/code&gt; recipes are structured and parametrized
through the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jinja2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda-build-config.yaml&lt;/code&gt; files. Currently,
the autotick bot examines the static metadata in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meta.yaml&lt;/code&gt; file and not
the fully rendered metadata. For this reason, we sometimes miss dependencies
of a given package that need to be migrated first. Adressing this issue involves
both calling the rendering process and also scaling that process to the entire
set of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda-forge&lt;/code&gt; packages.&lt;/p&gt;

    &lt;p&gt;Issue: https://github.com/regro/cf-scripts/issues/664&lt;br /&gt;
Experience Level: moderate&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Automatically Deployed ABI Migrations</title>
   <link href="https://conda-forge.org/blog//2019/12/06/cfep09"/>
   <updated>2019-12-06T00:00:00-06:00</updated>
   <id>https://conda-forge.org/blog//2019/12/06/cfep09</id>
   <content type="html">
&lt;p&gt;Handling application binary interface (ABI) migrations has always been a hassle for Conda-Forge.
Maintaining ABI consistency helps enable the “just use conda-forge” experience for many of our users,
making certain that numpy’s blas is the same as scipy’s.
As libraries update their code, the new versions may be ABI incompatible, as function signatures and other symbols
may have changed, leading to the dreaded &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SegmentationFault&lt;/code&gt;and other errors.&lt;/p&gt;

&lt;p&gt;Conda-Forge handles this by having a pinning file which tracks all the currently supported ABIs.
These pinned ABIs are then used to build the downstream packages, making certain that all are consistent.
As new versions of pinned software are released the pins are updated, causing a migration of the pin, and the
rebuilding of all packages which rely on the pinned package.
In the past this was handled by a change to the global pinnings, and a subsequent migration via the auto-tick bot.
While this worked, there were issues that this created.
Firstly, this approach could cause unsatisfiable build dependencies for new packages, as some of the new package’s
dependencies had been compiled with the new pins, but not all.
Secondly, migrations happened in series, if a second pin was moved while the first was being migrated then the 
migration could go wrong as packages which were being rebuilt for the first pin got the second pin before they were
ready.&lt;/p&gt;

&lt;p&gt;Conda-Forge Core has recently approved CFEP-9, a migration policy to fix these issues.
With CFEP-9 pinnings are proposed as small yaml snippets which contain the new pins.
The auto-tick bot then starts migrating the packages in order, applying the yaml snippet to each package in turn.
If a second pinning change is issued then the bot starts the migration for that package too, enabling the
two migrations to work independently.
If a package needs a change in both pins then the maintainers can choose the order in which the apply the pins
by merging one pin before the other.&lt;/p&gt;

&lt;p&gt;This approach will yield much greater stability in migrations, and will enable more maintainers to issue migrations.
Migrations can be issued by putting a PR into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda-forge/conda-forge-pinning-feedstock&lt;/code&gt;, adding a file to the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;migrations&lt;/code&gt; folder, PRs into the auto-tick bot are not needed any more.&lt;/p&gt;
</content>
 </entry>
 
 
 
</feed>
